swagger: '2.0'
info:
  description: 'Xmeme API Swagger Endpoints'
  version: '1.0.0'
  title: 'Xmeme API'
  contact:
    email: 'prateek10023@gmail.com'
host: 'localhost:8081'
basePath: ''
tags:
  - name: 'backend'
    description: 'Backend routes'
  - name: 'frontendDisplay'
    description: 'Frontend Display routes'
schemes:
  - 'https'
  - 'http'
paths:
  /memes:
    get:
      tags:
        - 'backend'
      summary: 'Get all memes'
      description: ''
      operationId: 'getAllMemes'
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'succesful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/MemeStored'
        '500':
          description: 'Server Error'
    post:
      tags:
        - 'backend'
      summary: 'Post a meme'
      description: ''
      operationId: 'postAMeme'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Meme Input parameters'
          required: true
          schema:
            $ref: '#/definitions/MemeInput'
      responses:
        '200':
          description: 'Meme posted'
          schema:
            $ref: '#/definitions/MemePostResponse'
        '409':
          description: 'Meme already exists in database'
        '422':
          description: 'Body Parameters are invalid, cannot post'
          schema:
            $ref: '#/definitions/ValidationError'
        '500':
          description: 'Server Error'
  /memes/{id}:
    get:
      tags:
        - 'backend'
      summary: 'Get meme by id'
      description: ''
      operationId: 'getMemeById'
      produces:
        - 'application/json'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'Id of meme.'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/MemeStored'
        '400':
          description: 'Invalid id'
        '404':
          description: 'Meme not found'
        '500':
          description: 'Server Error'
    delete:
      tags:
        - 'backend'
      summary: 'Delete meme by id'
      description: 'Deletes meme by id'
      operationId: 'deleteMeme'
      produces:
        - 'application/json'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'id of meme that needs to be updated'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'Succesful operation, Id deleted'
        '404':
          description: 'Id does not exist, cannot delete'
        '500':
          description: 'Server Error'
    patch:
      tags:
        - 'backend'
      summary: 'Update meme by id'
      description: 'Update meme by id'
      operationId: 'updateMeme'
      produces:
        - 'application/json'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'id of meme that needs to be updated'
          required: true
          type: 'string'
        - in: 'body'
          name: 'body'
          description: 'Updated meme object'
          required: true
          schema:
            $ref: '#/definitions/MemeUpdate'
      responses:
        '200':
          description: 'Meme Updated'
        '404':
          description: 'Id does not exist, cannot update'
        '500':
          description: 'Server error'
  /api/memes/totalPages:
    get:
      tags:
        - 'frontendDisplay'
      summary: 'Get totalpages'
      description: 'Gets the total number of pages required for pagination'
      operationId: 'getTotalPages'
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/TotalPages'
        '500':
          description: 'Server Error'
  /api/memes/display:
    get:
      tags:
        - 'frontendDisplay'
      summary: 'Get all memes by filtering through various parameters'
      description: 'Gets all memes by params like skip,take,sortBy,order'
      operationId: 'getAllMemesByParams'
      produces:
        - 'application/json'
      parameters:
        - name: 'sortBy'
          in: 'query'
          description: 'Sort by'
          type: 'string'
          default: 'id'
        - name: 'order'
          in: 'query'
          description: 'ascending/ descending order'
          type: 'string'
          default: 'desc'
        - name: 'skip'
          in: 'query'
          description: 'skip x no. of memes'
          type: 'number'
          default: 0
        - name: 'take'
          in: 'query'
          description: 'take x no. of memes'
          type: 'number'
          default: 5
      responses:
        '200':
          description: 'successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/MemeStored'
        '500':
          description: 'Server Error'

definitions:
  ValidationErrorMessage:
    type: 'object'
    properties:
      value:
        type: 'string'
      msg:
        type: 'string'
      param:
        type: 'string'
      location:
        type: 'string'
  ValidationError:
    type: 'object'
    properties:
      errors:
        type: 'array'
        items:
          $ref: '#/definitions/ValidationErrorMessage'
  MemePostResponse:
    type: 'object'
    properties:
      id:
        type: 'number'
  TotalPages:
    type: 'object'
    properties:
      totalPages:
        type: 'number'
  MemeInput:
    type: 'object'
    required:
      - 'name'
      - 'caption'
      - 'url'
    properties:
      name:
        type: 'string'
      url:
        type: 'string'
      caption:
        type: 'string'
  MemeStored:
    type: 'object'
    required:
      - 'name'
      - 'caption'
      - 'url'
      - 'id'
    properties:
      id:
        type: 'string'
      name:
        type: 'string'
      url:
        type: 'string'
      caption:
        type: 'string'
  MemeUpdate:
    type: 'object'
    properties:
      url:
        type: 'string'
      caption:
        type: 'string'
